
참조형 데이터의 복사
//참조형 데이터를 "="를 이용해서 복사를 하면 데이터가 저장된 곳의 주소를 복사합니다.이렇게 복사하면 어느 한 곳에서 내부 데이터를 바꾸면 다른 쪽에도 영향을 미치게 됩니다.
//영향을 미치지 못하도록 하려면 새로운 데이터 영역을 생성해서 내부 데이터를 복사해주는 방법을 사용해야 합니다.
//자바에서는 이런 역할을 수행하는 메소드의 이름을 clone으로 하는것을 권장합니다. 응용프로그램을 만들 때 데이터를 읽어내는 부분에 clone을 사용해야 합니다.
원본을 유지한 상태에서 복제된 데이터를 가지고 작업을 수행하다가 작업이 완료되면

Wrapper Class // Value 형을 Reference형으로 사용하기 위한 클래스 //상위 클래스 타입의 변수에는 하위 클래스 타입의 인스턴스를 대입 할 수 있다.

-boolean -> Boolean //형변환은 안된다.

정수{
-byte -> Byte  
-short -> Short
-char -> Character
-int -> Integer //기준형 - 특별한 기호 없이 썼을때 만들어짐, 연산의 기본단위  // ex) byte + byte  = int
-long -> Long
}

실수{
-float -> Float
-double -> Double //실수의 기준형 //ex) 10.7f + 11.3f = 24d
}
객체만들기 (Instance)
1.생성자 이용
new 생성자(값)
Integer i = new Integer(10); 

2.문자열 가지고 만들기
클래스.parse클래스("문자열");   ex) "10"을 10으로 바꾸려면 Integer.parseInt("10") //

3. "10k" 숫자와 문자가 합쳐진 것을 바꾸려면
NumberFormat Exception
ex) age : " 10"

Auto Boxing= 객체 생성
//Value 형의 데이터를 자동으로 Reference형으로 변환해주는 것  // 반대 Auto unBoxing 
ex {Integer i = new Integer(10);} == Integer i = 10; //자바 1.5 이상부터 사용가능 

숫자 관련 클래스
java.lang.Big Integer;
java.Math.Decimal; 

lotto 번호 받기
1~45 까지 중복 되지 않는 6개의 정수를 저장.
//데이터를 저장할 배열 생성 int []lotto = new int[6]

데이터 묶기   1.배열: 동일한 자료형
         2.클래스: 동일하거나 다른 자료형 // 내부 구성요소가 상호 독립적 
 
java.lang.System

public final class System extends Object // Object로 부터 상속 받았고 상속할 수 없는(final) 클래스

시스템관련 클래스
1.Field Summary
               -err: 표준 에러 스트림
               -in : 표준 입력 스트림 == 표준 입력 장치를 가리키는 필드(보통은 키보드입니다)
               -out: 표준 출력 스트림 == 표준 출력 장치를 가리키는 필드(보통은 모니터입니다)
2.Constuctor(생성자)가 없습니다. //모든 메소드가 static이기 때문에 인스턴스를 생성할 필요가 없어서 private로 숨겨두었습니다.                

3.주요 메소드 == static long currentTimeMillis(): 현재 시간을 1/1000초 단위의 정수로 리턴해주는 메소드입니다. 
1970년 1월 1일 자정 이후 지나온시간 : epoch time

static void exit(int status): JVM 종료 하는 메소드 == 자바 프로그램 종료 매개변수로 대입하는 정수는 시스템 오류 코드입니다.//0이면 정상 종료
static String getEnv(생략하거나 환경변수이름): 환경 변수 값 가져오기
static String getProperty(프로퍼티 이름): 프로퍼티 이름에 해당하는 속성 값 가져오기 - os.name, user.name, user.home, java.home, jave.version

java.lang.Class == 클래스에 대한 정보를 저장한 클래스, 인스턴스의 getClass()를 호출하면 Class타입의 인스턴스를 리턴합니다.
java.lang.Math == 수학관련 클래스, 모든 메소드가 static이라 인스턴스생성이 필요없기떄문에 생성자는 private으로 숨겨져 있습니다.
                                 운영체제 별로 다르게 동작하는데 이에 대한 보완으로 StrictMath라는 클래스를 제공합니다. PI라는 field와 random()이라는 메소드를 자주사용
java.lang.Runtime == 프로세스 실행과 관련된 클래스, 생성자가 private입니다, 추상클래스도 아니고 모든 멤버가 static도 아닙니다.
                                       이클래스의 인스턴스는 getRuntime()이라는 static메소드로 생성합니다.
                                       인스턴스 생성을 자신의 생성자를 이용하지 않고 static 메소드로 만드는 경우는 싱글톤 패턴의 클래스입니다.
                                                                            //싱글톤 패턴은 인스턴스를 1개만 생성하는 클래스입니다.   
                     exec("프로그램 매개변수") 프로그램을 매개변수와 함께 실행합니다. 매개변수를 대입하지 않으면 프로그램만 실행됩니다.

어떤 클래스의 Constructor가 없는데 static이 아닌 메소드가 존재하는 경우 자신을 리턴하는 static메소드가 있는지 없는지 확인해야 합니다.
만약 없다면 클래스이름Factory 클래스가 있는지 확인해야 합니다.

String 클래스 // 매우 중요, 연습 많이 해야함
==변하지 않는 문자열을 저장하는 클래스
1.인스턴스 생성 - 문자열 상수 대입 "안녕"
            - 디폴트 생성자: new String()
            - 문자열을 대입해서 생성하는 생성자:new String("문자열")
            - 바이트 배열을 가지고 만드는 생성자:new String(byte[])
            - 바이트 배열과 인코딩을 이용해서 만드는 생성자: new String(byte[], string encType)
  
2.주요 메소드 
char charAt(index idx): idx번째 문자를 리턴
int length(): 문자열의 개수를 리턴
byte [] getBytes(): 문자열을 바이트 배열로 리턴
byte [] getBytes(String encType): 문자열을 인코딩 방식에 맞는 바이트 배열로 리턴

3. + 연산자
==문자열이나 숫자 또는 boolean과 사용하면 결합을 해줍니다. 그러나 사용할 때 조심해야 합니다. String은 변할 수 없는 문자열을 저장하기 때문에 +로 결합하면
이전 내용을 복사해서 새로운 공간에서 작업을 합니다.
 
 


















